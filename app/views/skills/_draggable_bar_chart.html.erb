<% y_min = question.chart_values[question.chart_values.count - 1].label %>
<% y_max = question.chart_values[question.chart_values.count - 1].height %>
<% y_present = !(y_min.blank?) || !(y_max.nil?) %>
<% currY ||= [] %>

<body>
<div id="chartContainer" style="height: 370px; width: 100%;"></div>
<p>Having trouble? Try out our <%= link_to "Draggable Bar Chart Explorer", learning_draggable_path, data: {turbo: "false"} %> </p>
<script type="text/javascript">

	var chart = new CanvasJS.Chart("chartContainer", {       
	animationEnabled: true,
	theme: "light2",
	title: {
		text: "<%= question.graph_content %>"
	},
	
	<% if y_present %>
		axisY:{
		<%= !(y_min.blank?) ? ("minimum:  #{y_min} " + (!(y_max.nil?) ?
		", maximum: #{y_max}" : " ")) : (!(y_max.nil?) ?
		"maximum: #{y_max}" : " ") %>
		}, 
	<% end %>
	
	data: [{
		type: "column",
		dataPoints: [
			
			<% question.chart_values.each_with_index do |point, index| %>
		        <% label = point.label %>
		        <% height = point.height %>
		        <% next if label.blank? %> 
		        <% next if height.nil? %>
		        <% currY[index] = height %>
	    		<% index = index + 1 %>
	    		<% if index < (question.chart_values.count - 1) %>
	    			{ label: "<%= label %>" , y: <%= height %> },
	    		<% elsif index == (question.chart_values.count - 1) %>
	    			{ label: "<%= label %>" , y: <%= height %> }
	    		<% end %> 
    		<% end %>
    	
		]
	}]
});
chart.render();
 
var xSnapDistance = chart.axisX[0].convertPixelToValue(chart.get("dataPointWidth")) / 2;
var ySnapDistance = 3;
 
var xValue, yValue;
 
var mouseDown = false;
var selected = null;
var changeCursor = false;
 
var timerId = null;
 
function getPosition(e) {
	var parentOffset = $("#chartContainer > .canvasjs-chart-container").offset();          	
	var relX = e.pageX - parentOffset.left;
	var relY = e.pageY - parentOffset.top;
	xValue = Math.round(chart.axisX[0].convertPixelToValue(relX));
	yValue = Math.round(chart.axisY[0].convertPixelToValue(relY));
}
 
function searchDataPoint() {
	var dps = chart.data[0].dataPoints;
	for(var i = 0; i < dps.length; i++ ) {
		if( (xValue >= dps[i].x - xSnapDistance && xValue <= dps[i].x + xSnapDistance) && (yValue >= dps[i].y - ySnapDistance && yValue <= dps[i].y + ySnapDistance) ) 
		{
			if(mouseDown) {
				selected = i;
				break;
			} else {
				changeCursor = true;
				break; 
			}
		} else {
			selected = null;
			changeCursor = false;
		}
	}
}
 
jQuery("#chartContainer > .canvasjs-chart-container").on({
	mousedown: function(e) {
		mouseDown = true;
		getPosition(e);  
		searchDataPoint();
	},
	mousemove: function(e) {
		getPosition(e);
		if(mouseDown) {
			clearTimeout(timerId);
			timerId = setTimeout(function(){
				if(selected != null) {
					chart.data[0].dataPoints[selected].y = yValue;
					chart.render();
				}   
			}, 0);
		}
		else {
			searchDataPoint();
			if(changeCursor) {
				chart.data[0].set("cursor", "n-resize");
			} else {
				chart.data[0].set("cursor", "default");
			}
		}
	},
	mouseup: function(e) {
		if(selected != null) {
			chart.data[0].dataPoints[selected].y = yValue;
			<%  %>
			chart.render();
			mouseDown = false;
		}
	}
});
	
</script>
</body>
